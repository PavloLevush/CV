Результат 0: Python — Вікіпедія 
Результат 1: 
Python 3.7, 
Результат 2: Python 2.7 (підтримка закінчена 1 січня 2020 року. 
Результат 3: Python Software Foundation License 
Результат 4:  високого рівня разом із динамічною семантикою та динамічним зв'язуванням роблять її привабливою для швидкої розробки програм, а також як засіб поєднування наявних компонентів. Python підтримує  
Результат 5:  та пакети модулів, що сприяє модульності та повторному використанню коду. Інтерпретатор Python та стандартні бібліотеки доступні як у скомпільованій, так і у вихідній формі на всіх основних платформах. В мові програмування Python підтримується кілька  
Результат 6: Вплив інших мов на Python 
Результат 7: Спеціалізовані підмножини/розширення Python 
Результат 8: можливість використання Python в діалоговому режимі (дуже корисне для експериментування та розв'язання простих задач); 
Результат 9: , яке зветься IDLE і яке написане мовою Python; 
Результат 10: Python має ефективні  
Результат 11: . Елегантний синтаксис Python, динамічна обробка типів, а також те, що це  
Результат 12: Інтерпретатор мови Python і багата  
Результат 13: ) можуть бути отримані з сайту Python  
Результат 14: www.python.org 
Результат 15: Інтерпретатор мови Python може бути розширений функціями та типами даних, розробленими на  
Результат 16:  (або на іншій мові, яку можна викликати із C). Python також зручна як мова розширення для прикладних програм, що потребують подальшого налагодження.
 
Результат 17: {{subst:поліпшити автору|Python|28 березня 2021}} ~~~~ 
Результат 18: . Причина — приклади коду і уривки тексту відносяться до різних гілок Python 2.x і 3.x - слід розмежувати і, можливо, виділити у окремі статті. 
Результат 19: , автор Python 
Результат 20: Розробка мови Python була розпочата в кінці  
Результат 21:  потрібна була розширювана скриптова мова, і Гвідо почав писати Python на дозвіллі, запозичивши деякі напрацювання для мови  
Результат 22:  року Python є цілком  
Результат 23: . Python також запозичив багато рис таких мов, як  
Результат 24: , і навіть емблема на сайті python.org зображують зміїну голову.
 
Результат 25: Наявність дружньої спільноти користувачів, поряд з дизайнерською інтуїцією Гвідо, вважається одним з головних факторів успіху Python. Розвиток мови відбувається згідно з чітко регламентованими процесами створення, обговорення, відбору та реалізації документів PEP (Python Enhancement Proposal) — пропозицій щодо розвитку Python. 
Результат 26: , після тривалого тестування, вийшла перша версія Python 3000 (або Python 3.0, також використовується  
Результат 27:  Py3k). У Python 3000 усунено багато недоліків архітектури з максимально можливим (але не повним) збереженням сумісності зі старішими версіями. На сьогодні підтримуються Python версії 3.
 
Результат 28: Розробники мови Python є прихильниками певної філософії програмування, яку називають «The Zen of Python» ( 
Результат 29:  Python за допомогою команди  
Результат 30: Вплив інших мов на Python 
Результат 31: З'явившись порівняно пізно, Python створювався під впливом багатьох мов програмування:
 
Результат 32:  (фактично, Python створювався як спроба виправити помилки, допущені при проєктуванні ABC); 
Результат 33:  — він використовував найбільш несуперечливі конструкції з С, щоб не викликати неприязнь у Сі-програмістів до Python 
Результат 34: Більша частина інших можливостей Python (наприклад, байт-компіляція вихідного коду) також була реалізована раніше в інших мовах.
 
Результат 35:  Однак на цих платформах можна використовувати попередні версії Python — спільнота активно підтримує версії Python починаючи від 2.3 (для них виходять виправлення).
 
Результат 36: При цьому, на відміну від багатьох портованих систем, для всіх основних платформ Python має підтримку характерних для даної платформи технологій (наприклад, Microsoft  
Результат 37: ). Навіть більше, існує спеціальна версія Python для  
Результат 38: , що дозволяє інтерпретатору виконуватися на будь-якій системі, яка підтримує Java, при цьому класи Java можуть безпосередньо використовуватися з Python й навіть бути написаними на ньому. Також кілька проєктів забезпечують інтеграцію з платформою  
Результат 39: Python.Net 
Результат 40: Python підтримує  
Результат 41: . Python має багату бібліотеку для роботи з  
Результат 42: З колекцій Python підтримує  
Результат 43:  в режимі відлагодження, інтерпретатор Python має інтерактивний режим роботи, при якому введені з клавіатури вирази відразу ж виконуються, а результат виводиться на екран. Цей режим цікавий не тільки новачкам, але й досвідченим програмістам, які можуть протестувати в інтерактивному режимі будь-який фрагмент коду, перш ніж використовувати його в основній програмі, або просто використовувати як  
Результат 44: Так виглядає діалог роботи з Python в інтерактивному режимі:
 
Результат 45: Дизайн мови Python побудований навколо об'єктно-орієнтованої моделі програмування. Реалізація  
Результат 46:  в Python є елегантною, потужною та добре продуманою, але разом з тим, достатньо специфічною в порівнянні з іншими  
Результат 47: Python підтримує парадигму  
Результат 48: ) на Python оформлюється у вигляді  
Результат 49: . Модулі можуть бути двох типів за своїм походженням: модулі, написані на «чистому» Python, і модулі розширення (extension modules), написані на інших мовах програмування. Наприклад, в стандартній бібліотеці є «чистий» модуль pickle і його аналог на Сі: cPickle. Модуль оформляється у вигляді окремого файлу, а пакет — у вигляді окремого каталогу. Підключення модуля до програми здійснюється оператором  
Результат 50: Python підтримує повну  
Результат 51: ) є важливою частиною того, що називають «pythonic style», і широко застосовується в бібліотеках і  
Результат 52:  Python, таких як  
Результат 53:  підтримується в Python допомогою операторів  
Результат 54:  стало можливо тільки починаючи з Python 2.5. Інформація про поточний виняток завжди доступна через  
Результат 55: . Крім значення винятку, Python також зберігає стан стеку аж до точки збудження винятку — так званий traceback.
 
Результат 56: На відміну від мов програмування, що компілюються, в Python використання винятку не призводить до значних накладних витрат (а часто навіть дозволяє прискорити виконання програм) і дуже широко використовується. Винятки узгоджуються з філософією Python (10-й пункт  
Результат 57: «дзену Python» 
Результат 58:  (доступний, починаючи з Python 2.5).
 
Результат 59: У програмах на Python широко використовуються  
Результат 60: У Python 2.4 з'явилися  
Результат 61: Починаючи з версії 2.5, Python підтримує повноцінні співпроцедури: тепер в генератор можна передавати значення за допомогою методу  
Результат 62: У Python 2.5 з'явилися засоби для керування контекстом виконання блоку коду — оператор  
Результат 63: Починаючи з версії 2.4, Python дозволяє використовувати, так звані,  
Результат 64: У Python є ще кілька можливостей, що відрізняють його від багатьох інших мов високою гнучкістю та динамічністю.
 
Результат 65: Python поставляється «з батарейками в комплекті». 
Результат 66:  є однією з привабливостей мови Python. Тут є засоби для роботи з багатьма  
Результат 67: . Існує велика кількість прикладних бібліотек для Python у різноманітних галузях:  
Результат 68: Для Python прийнята специфікація програмного інтерфейсу до баз даних  
Результат 69: . Для Python написано багато  
Результат 70:  — інтерфейс шлюзу з вебсервером (Python Web Server Gateway Interface).
 
Результат 71: Python надає простий і зручний програмний інтерфейс  
Результат 72:  дозволяє майже автоматично отримувати прив'язки для використання C/C++ бібліотек у коді на Python. Можливості цього та інших інструментів варіюються від автоматичної генерації (C/C++/Fortran)-Python інтерфейсів за спеціальними файлами ( 
Результат 73: ) до надання зручніших API (boost::python 
Результат 74:  дозволяє програмам Python безпосередньо викликати функції з  
Результат 75: , написаних на C. Існують модулі, що дозволяють вбудовувати код на С/C++ прямо у вихідні файли Python, створюючи розширення «на льоту» (pyinline 
Результат 76: Інший підхід полягає у вбудовуванні інтерпретатора Python у застосунки. Python легко вбудовується в програми на  
Результат 77: . Взаємодія Python-застосунків з іншими системами можлива також за допомогою  
Результат 78:  можлива компіляція Python-подібної мови (додано можливість типізації) в еквівалентний Сі-код і зв'язування із зовнішніми модулями.
 
Результат 79:  передбачає створення компілятора для трансформації неявно типізованих Python програм в оптимізований С++ код. Починаючи з версії 0.22 shed skin дозволяє компілювати окремі функції в модулі розширень. Повна компіляція (станом на  
Результат 80: Python та переважна більшість бібліотек до нього безкоштовні й поставляються у вихідних кодах. Навіть більше, на відміну від багатьох відкритих систем, ліцензія ніяк не обмежує використання Python у комерційних розробках та не накладає ніяких зобов'язань, крім зазначення авторських прав.
 
Результат 81: З Python поставляється бібліотека  
Результат 82:  — високорівневої об'єктно-орієнтованої бібліотеки 3D-графіки. Крім того, існує бібліотека pythonOCC 
Результат 83: Python Imaging Library 
Результат 84: Найчастіше Python порівнюють з  
Результат 85: . Ці мови також є інтерпретованими та мають приблизно однакову швидкість виконання програм. Як і Perl, Python може успішно застосовуватися для написання скриптів (сценаріїв). Як і Ruby, Python є добре продуманою системою для  
Результат 86: У середовищі комерційних застосунків швидкість виконання програм на Python можуть порівнювати з  
Результат 87: Попри те, що Python має досить самобутній синтаксис, одним із принципів дизайну цієї мови є  
Результат 88: Див також списки недоліків мови Python 
Результат 89: Python, як і багато інших  
Результат 90:  Однак, у випадку з Python цей недолік компенсується зменшенням часу розробки програми. 
Результат 91:  У середньому, програма, написана на Python, в 2-4 рази компактніша, ніж її аналог на  
Результат 92: Існують проєкти реалізацій мови Python, що вводять високопродуктивні віртуальні машини (ВМ) як  
Результат 93: У найпопулярнішій реалізації мови Python інтерпретатор досить великий і більш вимогливий до ресурсів, ніж в аналогічних популярних реалізаціях  
Результат 94: , що обмежує його застосування у вбудованих системах. Тим не менше, Python знайшов застосування в  
Результат 95: Відсутність статичної типізації є не стільки вадою інтерпретатора, скільки вибором розробника мови. Річ у тому, що в Python прийнята так звана  
Результат 96: . Додавання необов'язковою статичної типізації параметрів функції заплановано для Python3000. 
Результат 97: Відсутність статичної типізації і деякі інші причини не дозволяють реалізувати в Python механізм  
Результат 98:  на етапі компіляції. Можливості Python дозволяють реалізувати динамічне перевантаження на етапі виконання, що, звичайно, уповільнює виклик, бо вирішення яку саме функцію викликати проводиться при кожному зверненні і є, в загальному випадку, досить складною процедурою. Відсутність перевантаження в Python намагаються компенсувати використанням віртуальних функцій.
 
Результат 99: прикладах програм на Python 
Результат 100: Плани з підтримки перевантаження в Python3000. 
Результат 101:  та деякими іншими мовами, в Python відсутня можливість модифікувати вбудовані класи, такі, як  
Результат 102:  та інші, що, однак, дозволяє Python споживати менше оперативної пам'яті і швидше працювати. Ще однією причиною введення такого обмеження є необхідність узгодження з модулями розширення. Багато модулів (з метою оптимізації швидкодії) перетворять Python-об'єкти елементарних типів до відповідних Сі-типів замість маніпуляцій з ними за допомогою Сі-API.
 
Результат 103: IronPython 
Результат 104: . При своїй роботі основний інтерпретатор Python постійно використовує велику кількість нитко-небезпечних даних. В основному це словники, в яких зберігаються атрибути об'єктів. Для уникнення руйнування цих даних при спільній модифікації з різних  
Результат 105:  перед початком виконання декількох інструкцій (за замовчуванням 100) потік інтерпретатора захоплює GIL, а після закінчення звільняє. Внаслідок цієї особливості в кожен момент часу може виконуватися тільки одна нить Python коду, навіть якщо на  
Результат 106:  У найближчому майбутньому перехід від GIL до інших технік не передбачається, однак є python-safethread 
Результат 107:  — CPython без GIL і з деякими іншими змінами (за твердженнями його авторів, на однонитевих застосунках швидкість відповідає 60-65 % від швидкості оригінальному CPython).
 
Результат 108: Якщо необхідно паралельне виконання декількох нитей Python-коду, то можна скористатися процесами, наприклад, модулем processing 
Результат 109:  на Python, таких як parallelpython 
Результат 110: , дозволяючи на час розрахунків виконуватися іншому Python-ниті. Іншим рішенням може бути використання IronPython або Jython, позбавлених даного недоліку.
 
Результат 111: Python портований на всі відомі платформи — від КПК до мейнфреймів. Існують порти під  
Результат 112: При цьому, на відміну від багатьох портованих систем, на кожній платформі Python підтримує характерні для даної платформи технології (наприклад,  
Результат 113: ). Крім того, існує спеціальна версія Python для віртуальної машини  
Результат 114: , що дозволяє інтерпретатору виконуватися на будь-якій системі, що підтримує Java, класи Java можуть безпосередньо використовуватися з Python і навіть бути написаними на Python. Нещодавно почалася розробка системи, спрямованої на повнішу інтеграцію з платформою  
Результат 115: Iron Python 
Результат 116: Python Enhancement Proposal 
Результат 117:  («PEP») — це документ зі стандартизованим дизайном, що надає загальну інформацію про мову Python, включаючи нові пропозиції, описи та роз'яснення можливостей мови. PEP пропонуються як основне джерело для пропозиції нових можливостей і для роз'яснення вибору того або іншого дизайну для основних елементів мови. Видатні PEP рецензуються і коментуються  
Результат 118: Серії Python 2.x і Python 3.x протягом кількох випусків будуть існувати паралельно, при цьому серія 2.x буде використовуватися для забезпечення сумісності та швидше за все в неї будуть включені деякі можливості серії 3.x. PEP 3000 містить більше інформації про плановані випуски.
 
Результат 119: Python 3.0 зворотно не сумісний з попередньою серією 2.x. Код Python 2.x швидше за все буде видавати помилки при виконанні в Python 3.0. Динамічна типізація Python, разом з планами зміни декількох методів словників, робить механічний переклад з Python 2.x в Python 3.0 дуже складним. Однак, утиліта «2to3» вже здатна зробити більшість роботи з перекладу коду, вказуючи на підозрілі їй частини за допомогою коментарів і попереджень. PEP 3000 рекомендує тримати вихідний код для серії 2.x, і робити випуски для Python 3.x за допомогою «2to3». Отриманий код не слід редагувати, поки програма повинна бути працездатною в Python 2.x.
 
Результат 120:  розробники оголосили про офіційне припинення розвитку гілки Python 2.x. Остання випущена версія Python 2.7. Далі розробка буде вестися лише у гілці Python 3.x.
 
Результат 121:  з вбудованого виразу у вбудовану функцію. Це дозволить модулям робити зміни, підлаштовуючись під різне використання функції, а також спростить код. У Python 2.6 ця можливість активується введенням  
Результат 122: Спеціалізовані підмножини/розширення Python 
Результат 123: На основі Python було створено кілька спеціалізованих підмножин мови, в основному призначених для статичної компіляції в машинний код. Деякі з них:
 
Результат 124:  значно обмежена реалізація Python без динамізму часу виконання та деяких інших можливостей. RPython код можна компілювати в безліч інших мов/платформ — C, JavaScript, Lisp, .NET 
Результат 125: . На RPython написаний інтерпретатор PyPy. 
Результат 126:  — обмежена реалізація Python, але трохи менше, ніж RPython. PyReX розширено можливостями статичної типізації типами з мови С і дозволяє вільно змішувати типізований та не типізований код. Призначений для написання модулів розширень, компілюється в код на мові С. 
Результат 127:  — компілятор Python коду в асемблер для PIC архітектури. 
Результат 128:  — призначений для компіляції неявно статично типізованого Python коду в оптимізований код на мові С++, проєкт далекий від завершення. 
Результат 129: Python — стабільна та поширена мова. Вона використовується в багатьох проєктах та в різних якостях: як основна мова програмування або для створення розширень та інтеграції додатків. На Python реалізована велика кількість проєктів, також вона активно використовується для створення прототипів майбутніх програм.
 
Результат 130: Python використовується в багатьох великих компаніях. 
Результат 131: Python Library Reference 
Результат 132: Python Reference Manual 
Результат 133: Extending and Embedding the Python Interpreter 
Результат 134: Python/C API Reference 
Результат 135: Пориньте у Python 3 
Результат 136: Python 3.9.1 is now available, together with 3.10.0a3 and 3.8.7rc1 
Результат 137: Python Insider 
Результат 138: . The Python Core Developers 
Результат 139: The final Python 2 release marks the end of an era 
Результат 140: Python 3.10.0a4 is now available for testing 
Результат 141: . Python Software Foundation. 
Результат 142: http://www.python.org/doc/essays/foreword/ 
Результат 143: Python Reference Manual 
Результат 144: The Making of Python 
Результат 145: Index of Python Enhancement Proposals (PEPs) 
Результат 146: Python 3.0 Release 
Результат 147: PEP 20 — The Zen of Python 
Результат 148: Foreword for «Programming Python» (1st ed .) 
Результат 149: The Making of Python 
Результат 150: Python on Android 
Результат 151: Python v2.6.1 documentation. What's New in Python 2.6 
Результат 152:  (англійською). Python Software Foundation.  
Результат 153: — Professional Python Software, Skills and Services 
Результат 154: PyCXX: Write Python Extensions in C 
Результат 155: PyInline: Mix Other Languages directly Inline with your Python 
Результат 156: Cython: C-Extensions for Python 
Результат 157: Shed Skin — An Optimizing Python-to-C++ Compiler 
Результат 158: pythonOCC, 3D CAD/CAE/PLM development framework for the Python programming language 
Результат 159: zephyrfalcon.org::labs::10 Python pitfalls 
Результат 160: Python/C++ GNU g++ 
Результат 161:  — JIT-компілятор для Python, що дозволяє збільшити швидкість роботи програм в 3-10 разів  
Результат 162: unladen-swallow. A faster implementation of Python 
Результат 163: . «Goals: ... Produce a version of Python at least 5x faster than CPython» 
Результат 164: Python for S60 — OpenSource 
Результат 165: Typechecking module for Python 
Результат 166: Method signature checking decorators «Python recipes» ActiveState Code 
Результат 167: Python 3000 FAQ 
Результат 168: Python Package Index: processing 0.52 
Результат 169: Parallel Python — Home 
Результат 170: Python for Windows  
Результат 171: Python for  
Результат 172: Python for Plan 9 
Результат 173: Python for Mac OS X 
Результат 174: Python for Palm OS 
Результат 175: Python for Other Platforms | SourceForge.net 
Результат 176: Python for Other Platforms | SourceForge.net 
Результат 177: Python for Other Platforms | SourceForge.net 
Результат 178: Python for Other Platforms | SourceForge.net 
Результат 179: What's New In Python 3.0 — Python v3.0.1 documentation 
Результат 180: Overview — Python v3.0.1 documentation 
Результат 181: PEP 0 -- Index of Python Enhancement Proposals (PEPs) 
Результат 182: PEP 8 -- Style Guide for Python Code 
Результат 183: PyPy (carbonpython) 
Результат 184: Cython: C-Extensions for Python 
Результат 185: Pyastra: python assembler translator 
Результат 186: Python Success Stories 
Результат 187: Головний сайт спільноти розробників Python. 
Результат 188: Python documentation 
Результат 189: Python 2: Курс Молодого Бійця 
Результат 190: «Програмування на мові Python (3.x). Початковий курс» 
Результат 191: Підручник з Python українською 
Результат 192: CLPython 
Результат 193: IronPython 
Результат 194: Python for S60 
Результат 195: Stackless Python 
Результат 196: Стандартна бібліотека мови Python 
Результат 197: Python Software Foundation 
Результат 198: Python 
Результат 199: Python 
Результат 200: https://uk.wikipedia.org/w/index.php?title=Python&oldid=30926046 
Результат 201: Python 
Результат 202: Статті з прикладами коду мовою Python 
